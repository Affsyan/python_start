# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно,
# пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
# При этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и строки.
# При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента и вносить его в список,
# только если введено число. Класс-исключение должен не позволить пользователю ввести текст (не число) и
# отобразить соответствующее сообщение. При этом работа скрипта не должна завершаться.

class NotNumber(Exception):
    def __init__(self, txt=''):
        self.txt = txt


def is_number(number):
    try:
        float(number)
        return True
    except ValueError:
        return False


number_list = []

while True:
    try:
        user_number = input('Введите число или введите q для выхода: ')
        if user_number == "q":
            break
        if not is_number(user_number):
            raise NotNumber("Введите число!")
    except NotNumber as e:
        print(e)
    else:
        number_list.append(float(user_number))

print(number_list)
